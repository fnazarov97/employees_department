definitions:
  models.CreateDepartment:
    properties:
      d_number:
        type: string
      name:
        type: string
    type: object
  models.CreateEmployee:
    properties:
      address:
        type: string
      department_id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      role_id:
        type: string
    type: object
  models.CreateRole:
    properties:
      discription:
        type: string
      r_title:
        type: string
    type: object
  models.CreateUser:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      login:
        type: string
      password:
        type: string
      phone_number:
        type: string
      typeU:
        type: string
    type: object
  models.Department:
    properties:
      created_at:
        type: string
      d_number:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Employee:
    properties:
      address:
        type: string
      created_at:
        type: string
      department_id:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      role_id:
        type: string
      updated_at:
        type: string
    type: object
  models.Empty:
    type: object
  models.GetListDepartmentResponse:
    properties:
      count:
        type: integer
      departments:
        items:
          $ref: '#/definitions/models.Department'
        type: array
    type: object
  models.GetListEmployeeResponse:
    properties:
      count:
        type: integer
      employees:
        items:
          $ref: '#/definitions/models.Employee'
        type: array
    type: object
  models.GetListRoleResponse:
    properties:
      count:
        type: integer
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
    type: object
  models.GetListUserResponse:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Login:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      access_token:
        type: string
    type: object
  models.Role:
    properties:
      created_at:
        type: string
      discription:
        type: string
      id:
        type: string
      r_title:
        type: string
      updated_at:
        type: string
    type: object
  models.UpdateDepartmentSwag:
    properties:
      d_number:
        type: string
      name:
        type: string
    type: object
  models.UpdateEmployeeSwag:
    properties:
      address:
        type: string
      department_id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      role_id:
        type: string
    type: object
  models.UpdateRoleSwag:
    properties:
      discription:
        type: string
      r_title:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      login:
        type: string
      password:
        type: string
      phone_number:
        type: string
      typeU:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /department:
    get:
      consumes:
      - application/json
      description: Get List Department
      operationId: get_list_Department
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: GetDepartmentListBody
          schema:
            $ref: '#/definitions/models.GetListDepartmentResponse'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get List Department
      tags:
      - Department
    post:
      consumes:
      - application/json
      description: Create Department
      operationId: create_Department
      parameters:
      - description: CreateDepartmentRequestBody
        in: body
        name: Department
        required: true
        schema:
          $ref: '#/definitions/models.CreateDepartment'
      produces:
      - application/json
      responses:
        "201":
          description: GetDepartmentBody
          schema:
            $ref: '#/definitions/models.Department'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Create Department
      tags:
      - Department
  /department/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Department
      operationId: delete_Department
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: DeleteDepartmentBody
          schema:
            $ref: '#/definitions/models.Empty'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Delete Department
      tags:
      - Department
    get:
      consumes:
      - application/json
      description: Get By ID Department
      operationId: get_by_id_department
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetDepartmentBody
          schema:
            $ref: '#/definitions/models.Department'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get By ID Department
      tags:
      - Department
    put:
      consumes:
      - application/json
      description: Update Department
      operationId: update_Department
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateDepartmentRequestBody
        in: body
        name: Department
        required: true
        schema:
          $ref: '#/definitions/models.UpdateDepartmentSwag'
      produces:
      - application/json
      responses:
        "202":
          description: UpdateDepartmentBody
          schema:
            $ref: '#/definitions/models.Department'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Update Department
      tags:
      - Department
  /employee:
    get:
      consumes:
      - application/json
      description: Get List Employee
      operationId: get_list_employee
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: GetEmployeeListBody
          schema:
            $ref: '#/definitions/models.GetListEmployeeResponse'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get List Employee
      tags:
      - Employee
    post:
      consumes:
      - application/json
      description: Create Employee
      operationId: create_employee
      parameters:
      - description: CreateEmployeeRequestBody
        in: body
        name: Employee
        required: true
        schema:
          $ref: '#/definitions/models.CreateEmployee'
      produces:
      - application/json
      responses:
        "201":
          description: GetEmployeeBody
          schema:
            $ref: '#/definitions/models.Employee'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Create Employee
      tags:
      - Employee
  /employee/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Employee
      operationId: delete_employee
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: DeleteEmployeeBody
          schema:
            $ref: '#/definitions/models.Empty'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Delete Employee
      tags:
      - Employee
    get:
      consumes:
      - application/json
      description: Get By ID Employee
      operationId: get_by_id_employee
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetEmployeeBody
          schema:
            $ref: '#/definitions/models.Employee'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get By ID Employee
      tags:
      - Employee
    put:
      consumes:
      - application/json
      description: Update Employee
      operationId: update_employee
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateEmployeeRequestBody
        in: body
        name: Employee
        required: true
        schema:
          $ref: '#/definitions/models.UpdateEmployeeSwag'
      produces:
      - application/json
      responses:
        "202":
          description: UpdateEmployeeBody
          schema:
            $ref: '#/definitions/models.Employee'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Update Employee
      tags:
      - Employee
  /login:
    post:
      consumes:
      - application/json
      description: Create Login
      operationId: login
      parameters:
      - description: LoginRequestBody
        in: body
        name: Login
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "201":
          description: GetLoginBody
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid Argument
          schema:
            type: string
        "500":
          description: Server Error
          schema:
            type: string
      summary: Create Login
      tags:
      - Login
  /role:
    get:
      consumes:
      - application/json
      description: Get List Role
      operationId: get_list_Role
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetRoleListBody
          schema:
            $ref: '#/definitions/models.GetListRoleResponse'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get List Role
      tags:
      - Role
    post:
      consumes:
      - application/json
      description: Create Role
      operationId: create_Role
      parameters:
      - description: CreateRoleRequestBody
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.CreateRole'
      produces:
      - application/json
      responses:
        "201":
          description: GetRoleBody
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Create Role
      tags:
      - Role
  /role/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Role
      operationId: delete_Role
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: DeleteRoleBody
          schema:
            $ref: '#/definitions/models.Empty'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Delete Role
      tags:
      - Role
    get:
      consumes:
      - application/json
      description: Get By ID Role
      operationId: get_by_id_Role
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetRoleBody
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get By ID Role
      tags:
      - Role
    put:
      consumes:
      - application/json
      description: Update Role
      operationId: update_Role
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateRoleRequestBody
        in: body
        name: Role
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRoleSwag'
      produces:
      - application/json
      responses:
        "202":
          description: UpdateRoleBody
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Update Role
      tags:
      - Role
  /user:
    post:
      consumes:
      - application/json
      description: Create User
      operationId: create_User
      parameters:
      - description: CreateUserRequestBody
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: GetUserBody
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid Argument
          schema:
            type: string
        "500":
          description: Server Error
          schema:
            type: string
      summary: Create User
      tags:
      - User
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Get By Id User
      operationId: get_by_id_User
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetUserBody
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid Argument
          schema:
            type: string
        "500":
          description: Server Error
          schema:
            type: string
      summary: Get By Id User
      tags:
      - User
  /v1/user:
    get:
      consumes:
      - application/json
      description: Get List User
      operationId: get_list_User
      parameters:
      - description: offset
        in: query
        name: offset
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetUserBody
          schema:
            $ref: '#/definitions/models.GetListUserResponse'
        "400":
          description: Invalid Argument
          schema:
            type: string
        "500":
          description: Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get List User
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
